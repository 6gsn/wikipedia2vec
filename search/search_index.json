{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wikipedia2Vec Star Wikipedia2Vec is a tool used for obtaining embeddings (or vector representations) of words and entities (i.e., concepts that have corresponding pages in Wikipedia) from Wikipedia. It is developed and maintained by Studio Ousia . This tool enables you to learn embeddings of words and entities simultaneously, and places similar words and entities close to one another in a continuous vector space. Embeddings can be easily trained by a single command with a publicly available Wikipedia dump as input. This tool implements the conventional skip-gram model to learn the embeddings of words, and its extension proposed in Yamada et al. (2016) to learn the embeddings of entities. This tool has been used in several state-of-the-art NLP models such as entity linking , named entity recognition , knowledge graph completion , entity relatedness , and question answering . This tool has been tested on Linux, Windows, and macOS. An empirical comparison between Wikipedia2Vec and existing embedding tools (i.e., FastText, Gensim, RDF2Vec, and Wiki2vec) is available here . Pretrained embeddings for 12 languages (i.e., English, Arabic, Chinese, Dutch, French, German, Italian, Japanese, Polish, Portuguese, Russian, and Spanish) can be downloaded from this page . References \uf0c1 If you use Wikipedia2Vec in a scientific publication, please cite the following paper: Ikuya Yamada, Akari Asai, Hiroyuki Shindo, Hideaki Takeda, Yoshiyasu Takefuji, Wikipedia2Vec: An Optimized Tool for Learning Embeddings of Words and Entities from Wikipedia . @article{yamada2018wikipedia2vec, title={Wikipedia2Vec: An Optimized Tool for Learning Embeddings of Words and Entities from Wikipedia}, author={Yamada, Ikuya and Asai, Akari and Shindo, Hiroyuki and Takeda, Hideaki and Takefuji, Yoshiyasu}, journal={arXiv preprint 1812.06280}, year={2018} } Furthermore, Wikipedia2Vec is an official implementation of the embedding model proposed in the following paper: Ikuya Yamada, Hiroyuki Shindo, Hideaki Takeda, Yoshiyasu Takefuji, Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation . @inproceedings{yamada2016joint, title={Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation}, author={Yamada, Ikuya and Shindo, Hiroyuki and Takeda, Hideaki and Takefuji, Yoshiyasu}, booktitle={Proceedings of The 20th SIGNLL Conference on Computational Natural Language Learning}, year={2016}, publisher={Association for Computational Linguistics}, doi={10.18653/v1/K16-1025}, pages={250--259} } License \uf0c1 Apache License 2.0","title":"Home"},{"location":"#references","text":"If you use Wikipedia2Vec in a scientific publication, please cite the following paper: Ikuya Yamada, Akari Asai, Hiroyuki Shindo, Hideaki Takeda, Yoshiyasu Takefuji, Wikipedia2Vec: An Optimized Tool for Learning Embeddings of Words and Entities from Wikipedia . @article{yamada2018wikipedia2vec, title={Wikipedia2Vec: An Optimized Tool for Learning Embeddings of Words and Entities from Wikipedia}, author={Yamada, Ikuya and Asai, Akari and Shindo, Hiroyuki and Takeda, Hideaki and Takefuji, Yoshiyasu}, journal={arXiv preprint 1812.06280}, year={2018} } Furthermore, Wikipedia2Vec is an official implementation of the embedding model proposed in the following paper: Ikuya Yamada, Hiroyuki Shindo, Hideaki Takeda, Yoshiyasu Takefuji, Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation . @inproceedings{yamada2016joint, title={Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation}, author={Yamada, Ikuya and Shindo, Hiroyuki and Takeda, Hideaki and Takefuji, Yoshiyasu}, booktitle={Proceedings of The 20th SIGNLL Conference on Computational Natural Language Learning}, year={2016}, publisher={Association for Computational Linguistics}, doi={10.18653/v1/K16-1025}, pages={250--259} }","title":"References"},{"location":"#license","text":"Apache License 2.0","title":"License"},{"location":"commands/","text":"Learning Embeddings \uf0c1 First, you need to download a source Wikipedia dump file (e.g., enwiki-latest-pages-articles.xml.bz2) from Wikimedia Downloads . The English dump file can be obtained by running the following command. % wget https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2 Note that you do not need to decompress the dump file. Then, the embeddings can be trained from a Wikipedia dump using the train command. % wikipedia2vec train DUMP_FILE OUT_FILE Arguments: DUMP_FILE : The Wikipedia dump file OUT_FILE : The output file Options: --dim-size : The number of dimensions of the embeddings (default: 100) --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5) --iteration : The number of iterations for Wikipedia pages (default: 5) --negative : The number of negative samples (default: 5) --lowercase/--no-lowercase : Whether to lowercase words (default: True) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --sent-detect : The sentence detector used to split texts into sentences. Currently, only icu is the possible value (default: None) --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10) --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5) --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5) --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False) --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False) --link-graph/--no-link-graph : Whether to learn from the Wikipedia link graph (default: True) --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10) --link-mentions : Whether to convert entity names into links (default: True) --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2) --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01) --max-mention-len : The maximum number of characters in an entity name (default: 20) --init-alpha : The initial learning rate (default: 0.025) --min-alpha : The minimum learning rate (default: 0.0001) --sample : The parameter that controls the downsampling of frequent words (default: 1e-4) --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75) --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0) --pool-size : The number of worker processes (default: the number of CPUs) The train command internally calls the five commands described below (namely, build_dump_db , build_dictionary , build_link_graph , build_mention_db , and train_embedding ). Further, the learned model file can be converted to a text file compatible with the format of Word2vec and GloVe using the save_text command. Building Dump Database \uf0c1 The build_dump_db command creates a database that contains Wikipedia pages each of which consists of texts and anchor links in it. % wikipedia2vec build_dump_db DUMP_FILE OUT_FILE Arguments: DUMP_FILE : The Wikipedia dump file OUT_FILE : The output file Options: --pool-size : The number of worker processes (default: the number of CPUs) Building Dictionary \uf0c1 The build_dictionary command builds a dictionary of words and entities. % wikipedia2vec build_dictionary DUMP_DB_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command OUT_FILE : The output file Options: --lowercase/--no-lowercase : Whether to lowercase words (default: True) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10) --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5) --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5) --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False) --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False) --pool-size : The number of worker processes (default: the number of CPUs) Building Link Graph (Optional) \uf0c1 The build_link_graph command generates a sparse matrix representing the link structure between Wikipedia entities. % wikipedia2vec build_link_graph DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --pool-size : The number of worker processes (default: the number of CPUs) Building Mention DB (Optional) \uf0c1 The build_mention_db command builds a database that contains the mappings of entity names (mentions) and their possible referent entities. % wikipedia2vec build_mention_db DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2) --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01) --max-mention-len : The maximum number of characters in an entity name (default: 20) --case-sensitive : Whether to detect entity names in a case sensitive manner (default: False) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --pool-size : The number of worker processes (default: the number of CPUs) Learning Embeddings \uf0c1 The train_embedding command runs the training of the embeddings. % wikipedia2vec train_embedding DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --link-graph : The link graph file generated using the build_link_graph command --mention-db : The mention DB file generated using the build_mention_db command --dim-size : The number of dimensions of the embeddings (default: 100) --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5) --iteration : The number of iterations for Wikipedia pages (default: 5) --negative : The number of negative samples (default: 5) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible values are regexp , icu , mecab , and jieba --sent-detect : The sentence detector used to split texts into sentences. Currently, only icu is the possible value (default: None) --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10) --init-alpha : The initial learning rate (default: 0.025) --min-alpha : The minimum learning rate (default: 0.0001) --sample : The parameter that controls the downsampling of frequent words (default: 1e-4) --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75) --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0) --pool-size : The number of worker processes (default: the number of CPUs) Saving Embeddings in Text Format \uf0c1 save_text outputs a model in a text format. % wikipedia2vec save_text MODEL_FILE OUT_FILE Arguments: MODEL_FILE : The model file generated by the train_embedding command OUT_FILE : The output file Options: --out-format : The output format. Possible values are default , word2vec , and glove . If word2vec and glove are specified, the format adopted by Word2Vec and GloVe are used, respectively.","title":"Learning Embeddings"},{"location":"commands/#learning-embeddings","text":"First, you need to download a source Wikipedia dump file (e.g., enwiki-latest-pages-articles.xml.bz2) from Wikimedia Downloads . The English dump file can be obtained by running the following command. % wget https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2 Note that you do not need to decompress the dump file. Then, the embeddings can be trained from a Wikipedia dump using the train command. % wikipedia2vec train DUMP_FILE OUT_FILE Arguments: DUMP_FILE : The Wikipedia dump file OUT_FILE : The output file Options: --dim-size : The number of dimensions of the embeddings (default: 100) --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5) --iteration : The number of iterations for Wikipedia pages (default: 5) --negative : The number of negative samples (default: 5) --lowercase/--no-lowercase : Whether to lowercase words (default: True) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --sent-detect : The sentence detector used to split texts into sentences. Currently, only icu is the possible value (default: None) --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10) --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5) --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5) --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False) --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False) --link-graph/--no-link-graph : Whether to learn from the Wikipedia link graph (default: True) --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10) --link-mentions : Whether to convert entity names into links (default: True) --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2) --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01) --max-mention-len : The maximum number of characters in an entity name (default: 20) --init-alpha : The initial learning rate (default: 0.025) --min-alpha : The minimum learning rate (default: 0.0001) --sample : The parameter that controls the downsampling of frequent words (default: 1e-4) --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75) --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0) --pool-size : The number of worker processes (default: the number of CPUs) The train command internally calls the five commands described below (namely, build_dump_db , build_dictionary , build_link_graph , build_mention_db , and train_embedding ). Further, the learned model file can be converted to a text file compatible with the format of Word2vec and GloVe using the save_text command.","title":"Learning Embeddings"},{"location":"commands/#building-dump-database","text":"The build_dump_db command creates a database that contains Wikipedia pages each of which consists of texts and anchor links in it. % wikipedia2vec build_dump_db DUMP_FILE OUT_FILE Arguments: DUMP_FILE : The Wikipedia dump file OUT_FILE : The output file Options: --pool-size : The number of worker processes (default: the number of CPUs)","title":"Building Dump Database"},{"location":"commands/#building-dictionary","text":"The build_dictionary command builds a dictionary of words and entities. % wikipedia2vec build_dictionary DUMP_DB_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command OUT_FILE : The output file Options: --lowercase/--no-lowercase : Whether to lowercase words (default: True) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --min-word-count : A word is ignored if the total frequency of the word is less than this value (default: 10) --min-entity-count : An entity is ignored if the total frequency of the entity appearing as the referent of an anchor link is less than this value (default: 5) --min-paragraph-len : A paragraph is ignored if its length is shorter than this value (default: 5) --category/--no-category : Whether to include Wikipedia categories in the dictionary (default:False) --disambi/--no-disambi : Whether to include disambiguation entities in the dictionary (default:False) --pool-size : The number of worker processes (default: the number of CPUs)","title":"Building Dictionary"},{"location":"commands/#building-link-graph-optional","text":"The build_link_graph command generates a sparse matrix representing the link structure between Wikipedia entities. % wikipedia2vec build_link_graph DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --pool-size : The number of worker processes (default: the number of CPUs)","title":"Building Link Graph (Optional)"},{"location":"commands/#building-mention-db-optional","text":"The build_mention_db command builds a database that contains the mappings of entity names (mentions) and their possible referent entities. % wikipedia2vec build_mention_db DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --min-link-prob : An entity name is ignored if the probability of the name appearing as a link is less than this value (default: 0.2) --min-prior-prob : An entity is not registered as a referent of an entity name if the probability of the entity name referring to the entity is less than this value (default: 0.01) --max-mention-len : The maximum number of characters in an entity name (default: 20) --case-sensitive : Whether to detect entity names in a case sensitive manner (default: False) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible choices are regexp , icu , mecab , and jieba --pool-size : The number of worker processes (default: the number of CPUs)","title":"Building Mention DB (Optional)"},{"location":"commands/#learning-embeddings_1","text":"The train_embedding command runs the training of the embeddings. % wikipedia2vec train_embedding DUMP_DB_FILE DIC_FILE OUT_FILE Arguments: DUMP_DB_FILE : The database file generated using the build_dump_db command DIC_FILE : The dictionary file generated by the build_dictionary command OUT_FILE : The output file Options: --link-graph : The link graph file generated using the build_link_graph command --mention-db : The mention DB file generated using the build_mention_db command --dim-size : The number of dimensions of the embeddings (default: 100) --window : The maximum distance between the target item (word or entity) and the context word to be predicted (default: 5) --iteration : The number of iterations for Wikipedia pages (default: 5) --negative : The number of negative samples (default: 5) --tokenizer : The name of the tokenizer used to tokenize a text into words. Possible values are regexp , icu , mecab , and jieba --sent-detect : The sentence detector used to split texts into sentences. Currently, only icu is the possible value (default: None) --entities-per-page : For processing each page, the specified number of randomly chosen entities are used to predict their neighboring entities in the link graph (default: 10) --init-alpha : The initial learning rate (default: 0.025) --min-alpha : The minimum learning rate (default: 0.0001) --sample : The parameter that controls the downsampling of frequent words (default: 1e-4) --word-neg-power : Negative sampling of words is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0.75) --entity-neg-power : Negative sampling of entities is performed based on the probability proportional to the frequency raised to the power specified by this option (default: 0) --pool-size : The number of worker processes (default: the number of CPUs)","title":"Learning Embeddings"},{"location":"commands/#saving-embeddings-in-text-format","text":"save_text outputs a model in a text format. % wikipedia2vec save_text MODEL_FILE OUT_FILE Arguments: MODEL_FILE : The model file generated by the train_embedding command OUT_FILE : The output file Options: --out-format : The output format. Possible values are default , word2vec , and glove . If word2vec and glove are specified, the format adopted by Word2Vec and GloVe are used, respectively.","title":"Saving Embeddings in Text Format"},{"location":"install/","text":"Installation \uf0c1 Wikipedia2Vec can be installed from PyPI: % pip install wikipedia2vec Alternatively, you can install the development version of this software from the GitHub repository: % git clone https://github.com/studio-ousia/wikipedia2vec.git % cd wikipedia2vec % pip install Cython % ./cythonize.sh % pip install . Wikipedia2Vec requires the 64-bit version of Python, and can be run on Linux, Windows, and Mac OSX. It currently depends on the following Python libraries: click , jieba , joblib , lmdb , marisa-trie , mwparserfromhell , numpy , scipy , six , and tqdm . If you want to train embeddings on your machine, it is highly recommended to install a BLAS library. We recommend using OpenBLAS or Intel Math Kernel Library . Note that, the BLAS library needs to be recognized properly from SciPy. This can be confirmed by using the following command: % python -c 'import scipy; scipy.show_config()' To process Japanese Wikipedia dumps, it is also required to install MeCab and its Python binding . Furthermore, to use ICU library to split either words or sentences or both, you need to install the C/C++ ICU library and the PyICU library.","title":"Installation"},{"location":"install/#installation","text":"Wikipedia2Vec can be installed from PyPI: % pip install wikipedia2vec Alternatively, you can install the development version of this software from the GitHub repository: % git clone https://github.com/studio-ousia/wikipedia2vec.git % cd wikipedia2vec % pip install Cython % ./cythonize.sh % pip install . Wikipedia2Vec requires the 64-bit version of Python, and can be run on Linux, Windows, and Mac OSX. It currently depends on the following Python libraries: click , jieba , joblib , lmdb , marisa-trie , mwparserfromhell , numpy , scipy , six , and tqdm . If you want to train embeddings on your machine, it is highly recommended to install a BLAS library. We recommend using OpenBLAS or Intel Math Kernel Library . Note that, the BLAS library needs to be recognized properly from SciPy. This can be confirmed by using the following command: % python -c 'import scipy; scipy.show_config()' To process Japanese Wikipedia dumps, it is also required to install MeCab and its Python binding . Furthermore, to use ICU library to split either words or sentences or both, you need to install the C/C++ ICU library and the PyICU library.","title":"Installation"},{"location":"intro/","text":"Introduction \uf0c1 Wikipedia2Vec is a tool for learning embeddings of words and entities from Wikipedia. The learned embeddings map similar words and entities close to one another in a continuous vector space. This tool learns embeddings of words and entities by iterating over entire Wikipedia pages and jointly optimizing the following three submodels: Wikipedia link graph model , which learns entity embeddings by predicting neighboring entities in Wikipedia's link graph, an undirected graph whose nodes are entities and edges represent links between entities, given each entity in Wikipedia. Here, an edge is created between a pair of entities if the page of one entity has a link to that of the other entity or if both pages link to each other. Word-based skip-gram model , which learns word embeddings by predicting neighboring words given each word in a text contained on a Wikipedia page. Anchor context model , which aims to place similar words and entities near one another in the vector space, and to create interactions between embeddings of words and those of entities. Here, we obtain referent entities and their neighboring words from links contained in a Wikipedia page, and the model learns embeddings by predicting neighboring words given each entity. These three submodels are based on the skip-gram model , which is a neural network model with a training objective to find embeddings that are useful for predicting context items (i.e., neighboring words or entities) given a target item. For further details, please refer to this paper: Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation . Optimized Implementation for Learning Embeddings \uf0c1 Wikipedia2Vec is implemented in Python, and most of its code is converted into C++ using Cython to boost its performance. Linear algebraic operations required to learn embeddings are performed by Basic Linear Algebra Subprograms (BLAS). We store the embeddings as a float matrix in a shared memory space and update it in parallel using multiple processes. Automatic Generation of Entity Links \uf0c1 One challenge is that many entity names do not appear as links in Wikipedia. This is because Wikipedia instructs its contributors to create a link only when the name first occurs on the page . This is problematic because Wikipedia2Vec uses links as a source to learn embeddings. To address this, our tool provides a feature that automatically generates links. It first creates a dictionary that maps each entity name to its possible referent entities. This is done by extracting all names and their referring entities from all links contained in Wikipedia. Then, during training, our tool takes all words and phrases from the target page and converts each into a link to an entity, if the entity is referred by a link on the same page, or if there is only one referent entity associated to the name in the dictionary.","title":"Introduction"},{"location":"intro/#introduction","text":"Wikipedia2Vec is a tool for learning embeddings of words and entities from Wikipedia. The learned embeddings map similar words and entities close to one another in a continuous vector space. This tool learns embeddings of words and entities by iterating over entire Wikipedia pages and jointly optimizing the following three submodels: Wikipedia link graph model , which learns entity embeddings by predicting neighboring entities in Wikipedia's link graph, an undirected graph whose nodes are entities and edges represent links between entities, given each entity in Wikipedia. Here, an edge is created between a pair of entities if the page of one entity has a link to that of the other entity or if both pages link to each other. Word-based skip-gram model , which learns word embeddings by predicting neighboring words given each word in a text contained on a Wikipedia page. Anchor context model , which aims to place similar words and entities near one another in the vector space, and to create interactions between embeddings of words and those of entities. Here, we obtain referent entities and their neighboring words from links contained in a Wikipedia page, and the model learns embeddings by predicting neighboring words given each entity. These three submodels are based on the skip-gram model , which is a neural network model with a training objective to find embeddings that are useful for predicting context items (i.e., neighboring words or entities) given a target item. For further details, please refer to this paper: Joint Learning of the Embedding of Words and Entities for Named Entity Disambiguation .","title":"Introduction"},{"location":"intro/#optimized-implementation-for-learning-embeddings","text":"Wikipedia2Vec is implemented in Python, and most of its code is converted into C++ using Cython to boost its performance. Linear algebraic operations required to learn embeddings are performed by Basic Linear Algebra Subprograms (BLAS). We store the embeddings as a float matrix in a shared memory space and update it in parallel using multiple processes.","title":"Optimized Implementation for Learning Embeddings"},{"location":"intro/#automatic-generation-of-entity-links","text":"One challenge is that many entity names do not appear as links in Wikipedia. This is because Wikipedia instructs its contributors to create a link only when the name first occurs on the page . This is problematic because Wikipedia2Vec uses links as a source to learn embeddings. To address this, our tool provides a feature that automatically generates links. It first creates a dictionary that maps each entity name to its possible referent entities. This is done by extracting all names and their referring entities from all links contained in Wikipedia. Then, during training, our tool takes all words and phrases from the target page and converts each into a link to an entity, if the entity is referred by a link on the same page, or if there is only one referent entity associated to the name in the dictionary.","title":"Automatic Generation of Entity Links"},{"location":"pretrained/","text":"Pretrained Embeddings \uf0c1 We provide pretrained embeddings for 12 languages in binary and text format. The binary files can be loaded using the Wikipedia2Vec.load() method (see API Usage ). The text files are compatible with the text format of Word2vec . Therefore, these files can be loaded using other libraries such as Gensim's load_word2vec_format() . In the text files, all entities have a prefix ENTITY/ to distinguish them from words. Note that it is required to decompress the file before using it. English \uf0c1 enwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt) enwiki_20180420_nolg (window=5, iteration=10, negative=15, no link graph): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt) enwiki_20180420_win10 (window=10, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt) Arabic \uf0c1 arwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Chinese \uf0c1 zhwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Dutch \uf0c1 nlwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) French \uf0c1 frwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) German \uf0c1 dewiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Italian \uf0c1 itwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Japanese \uf0c1 jawiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Polish \uf0c1 plwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Portuguese \uf0c1 ptwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Russian \uf0c1 ruwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) Spanish \uf0c1 eswiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Pretrained Embeddings"},{"location":"pretrained/#pretrained-embeddings","text":"We provide pretrained embeddings for 12 languages in binary and text format. The binary files can be loaded using the Wikipedia2Vec.load() method (see API Usage ). The text files are compatible with the text format of Word2vec . Therefore, these files can be loaded using other libraries such as Gensim's load_word2vec_format() . In the text files, all entities have a prefix ENTITY/ to distinguish them from words. Note that it is required to decompress the file before using it.","title":"Pretrained Embeddings"},{"location":"pretrained/#english","text":"enwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt) enwiki_20180420_nolg (window=5, iteration=10, negative=15, no link graph): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt) enwiki_20180420_win10 (window=10, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt) 500d (bin) 500d (txt)","title":"English"},{"location":"pretrained/#arabic","text":"arwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Arabic"},{"location":"pretrained/#chinese","text":"zhwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Chinese"},{"location":"pretrained/#dutch","text":"nlwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Dutch"},{"location":"pretrained/#french","text":"frwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"French"},{"location":"pretrained/#german","text":"dewiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"German"},{"location":"pretrained/#italian","text":"itwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Italian"},{"location":"pretrained/#japanese","text":"jawiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Japanese"},{"location":"pretrained/#polish","text":"plwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Polish"},{"location":"pretrained/#portuguese","text":"ptwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Portuguese"},{"location":"pretrained/#russian","text":"ruwiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Russian"},{"location":"pretrained/#spanish","text":"eswiki_20180420 (window=5, iteration=10, negative=15): 100d (bin) 100d (txt) 300d (bin) 300d (txt)","title":"Spanish"},{"location":"usage/","text":"API Usage \uf0c1 Wikipedia2Vec provides functions to access the learned embeddings of words and entities. The embeddings can be loaded by the load() method: >>> from wikipedia2vec import Wikipedia2Vec >>> wiki2vec = Wikipedia2Vec.load(MODEL_FILE) The embeddings of words and those of entities can be obtained using the get_word_vector() and get_entity_vector() methods, respectively: >>> wiki2vec.get_word_vector('the') memmap([ 0.01617998, -0.03325786, -0.01397999, -0.00150471, 0.03237337, ... -0.04226106, -0.19677088, -0.31087297, 0.1071524 , -0.09824426], dtype=float32) >>> wiki2vec.get_entity_vector('Scarlett Johansson') memmap([-0.19793572, 0.30861306, 0.29620451, -0.01193621, 0.18228433, ... 0.04986198, 0.24383858, -0.01466644, 0.10835337, -0.0697331 ], dtype=float32) Furthermore, the most_similar() method takes an item (i.e., words or entities), and computes most similar items of the item in the vector space based on cosine similarity. The number of items to be returned can be specified as a second argument: >>> wiki2vec.most_similar(wiki2vec.get_word('yoda'), 5) [(<Word yoda>, 1.0), (<Entity Yoda>, 0.84333622), (<Word darth>, 0.73328167), (<Word kenobi>, 0.7328127), (<Word jedi>, 0.7223742)] >>> wiki2vec.most_similar(wiki2vec.get_entity('Scarlett Johansson'), 5) [(<Entity Scarlett Johansson>, 1.0), (<Entity Natalie Portman>, 0.75090045), (<Entity Eva Mendes>, 0.73651594), (<Entity Emma Stone>, 0.72868186), (<Entity Cameron Diaz>, 0.72390842)]","title":"API Usage"},{"location":"usage/#api-usage","text":"Wikipedia2Vec provides functions to access the learned embeddings of words and entities. The embeddings can be loaded by the load() method: >>> from wikipedia2vec import Wikipedia2Vec >>> wiki2vec = Wikipedia2Vec.load(MODEL_FILE) The embeddings of words and those of entities can be obtained using the get_word_vector() and get_entity_vector() methods, respectively: >>> wiki2vec.get_word_vector('the') memmap([ 0.01617998, -0.03325786, -0.01397999, -0.00150471, 0.03237337, ... -0.04226106, -0.19677088, -0.31087297, 0.1071524 , -0.09824426], dtype=float32) >>> wiki2vec.get_entity_vector('Scarlett Johansson') memmap([-0.19793572, 0.30861306, 0.29620451, -0.01193621, 0.18228433, ... 0.04986198, 0.24383858, -0.01466644, 0.10835337, -0.0697331 ], dtype=float32) Furthermore, the most_similar() method takes an item (i.e., words or entities), and computes most similar items of the item in the vector space based on cosine similarity. The number of items to be returned can be specified as a second argument: >>> wiki2vec.most_similar(wiki2vec.get_word('yoda'), 5) [(<Word yoda>, 1.0), (<Entity Yoda>, 0.84333622), (<Word darth>, 0.73328167), (<Word kenobi>, 0.7328127), (<Word jedi>, 0.7223742)] >>> wiki2vec.most_similar(wiki2vec.get_entity('Scarlett Johansson'), 5) [(<Entity Scarlett Johansson>, 1.0), (<Entity Natalie Portman>, 0.75090045), (<Entity Eva Mendes>, 0.73651594), (<Entity Emma Stone>, 0.72868186), (<Entity Cameron Diaz>, 0.72390842)]","title":"API Usage"}]}